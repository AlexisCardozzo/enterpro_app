// Mocks generated by Mockito 5.4.6 from annotations
// in enterpro/test/widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:enterpro/models/avatar.dart' as _i10;
import 'package:enterpro/models/gamification/achievement.dart' as _i7;
import 'package:enterpro/models/gamification/user_stats.dart' as _i6;
import 'package:enterpro/models/habit.dart' as _i5;
import 'package:enterpro/models/math_game.dart' as _i8;
import 'package:enterpro/models/math_question.dart' as _i9;
import 'package:enterpro/services/database_helper.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i3.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Database> get database =>
      (super.noSuchMethod(
            Invocation.getter(#database),
            returnValue: _i4.Future<_i2.Database>.value(
              _FakeDatabase_0(this, Invocation.getter(#database)),
            ),
          )
          as _i4.Future<_i2.Database>);

  @override
  _i4.Future<void> insertHabit(_i5.Habit? habit) =>
      (super.noSuchMethod(
            Invocation.method(#insertHabit, [habit]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i5.Habit>> getHabits() =>
      (super.noSuchMethod(
            Invocation.method(#getHabits, []),
            returnValue: _i4.Future<List<_i5.Habit>>.value(<_i5.Habit>[]),
          )
          as _i4.Future<List<_i5.Habit>>);

  @override
  _i4.Future<_i6.UserStats?> getUserStats() =>
      (super.noSuchMethod(
            Invocation.method(#getUserStats, []),
            returnValue: _i4.Future<_i6.UserStats?>.value(),
          )
          as _i4.Future<_i6.UserStats?>);

  @override
  _i4.Future<void> insertUserStats(_i6.UserStats? stats) =>
      (super.noSuchMethod(
            Invocation.method(#insertUserStats, [stats]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateUserStats(_i6.UserStats? stats) =>
      (super.noSuchMethod(
            Invocation.method(#updateUserStats, [stats]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i7.Achievement>> getAchievements() =>
      (super.noSuchMethod(
            Invocation.method(#getAchievements, []),
            returnValue: _i4.Future<List<_i7.Achievement>>.value(
              <_i7.Achievement>[],
            ),
          )
          as _i4.Future<List<_i7.Achievement>>);

  @override
  _i4.Future<void> insertAchievement(_i7.Achievement? achievement) =>
      (super.noSuchMethod(
            Invocation.method(#insertAchievement, [achievement]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateAchievement(_i7.Achievement? achievement) =>
      (super.noSuchMethod(
            Invocation.method(#updateAchievement, [achievement]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateHabit(_i5.Habit? habit) =>
      (super.noSuchMethod(
            Invocation.method(#updateHabit, [habit]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteHabit(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteHabit, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> insertMathGame(_i8.MathGame? game) =>
      (super.noSuchMethod(
            Invocation.method(#insertMathGame, [game]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i8.MathGame>> getMathGames() =>
      (super.noSuchMethod(
            Invocation.method(#getMathGames, []),
            returnValue: _i4.Future<List<_i8.MathGame>>.value(<_i8.MathGame>[]),
          )
          as _i4.Future<List<_i8.MathGame>>);

  @override
  _i4.Future<void> updateMathGame(_i8.MathGame? game) =>
      (super.noSuchMethod(
            Invocation.method(#updateMathGame, [game]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteMathGame(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteMathGame, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> insertMathQuestion(_i9.MathQuestion? question) =>
      (super.noSuchMethod(
            Invocation.method(#insertMathQuestion, [question]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<int> insertAvatar(_i10.Avatar? avatar) =>
      (super.noSuchMethod(
            Invocation.method(#insertAvatar, [avatar]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<_i10.Avatar?> getAvatar(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getAvatar, [id]),
            returnValue: _i4.Future<_i10.Avatar?>.value(),
          )
          as _i4.Future<_i10.Avatar?>);

  @override
  _i4.Future<int> updateAvatar(_i10.Avatar? avatar) =>
      (super.noSuchMethod(
            Invocation.method(#updateAvatar, [avatar]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> deleteAvatar(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteAvatar, [id]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<List<_i9.MathQuestion>> getMathQuestionsForGame(int? gameId) =>
      (super.noSuchMethod(
            Invocation.method(#getMathQuestionsForGame, [gameId]),
            returnValue: _i4.Future<List<_i9.MathQuestion>>.value(
              <_i9.MathQuestion>[],
            ),
          )
          as _i4.Future<List<_i9.MathQuestion>>);

  @override
  _i4.Future<void> updateMathQuestion(_i9.MathQuestion? question) =>
      (super.noSuchMethod(
            Invocation.method(#updateMathQuestion, [question]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteMathQuestion(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteMathQuestion, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
